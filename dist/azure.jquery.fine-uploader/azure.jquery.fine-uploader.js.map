{"version":3,"sources":["?","../client/js/jquery-plugin.js","../client/js/jquery-dnd.js","../client/js/azure/jquery-plugin.js","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/azure/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/azure/uploader.js"],"names":["global","$","$el","pluginOptions","init","options","xformedOpts","transformVariables","newUploaderInstance","getNewUploaderInstance","uploader","addCallbacks","params","uploaderType","pluginOption","namespace","charAt","toUpperCase","slice","toLowerCase","qq","FineUploader","dataStore","key","val","data","undefined","instanceToStore","option","optionVal","transformedOpts","callbacks","each","_options","prop","nonJqueryCallback","name","callbackEventTarget","exec","substring","originalArgs","Array","prototype","call","arguments","transformedArgs","nonJqueryCallbackRetVal","jqueryEventCallbackRetVal","idx","arg","push","maybeWrapInJquery","apply","this","triggerHandler","error","log","message","source","dest","xformed","arrayVals","element","inArray","isPlainObject","isArray","arrayVal","arrayObjDest","merge","isValidCommand","command","type","match","delegateCommand","xformedArgs","origArgs","retVal","transformedVal","nodeType","cloneNode","fn","fineUploader","optionsOrCommand","self","selfArgs","retVals","index","el","length","jQuery","rootDataKey","dropZoneElements","dnd","DragAndDrop","func","$callbackEl","args","jqueryHandlerResult","fineUploaderDnd","fineUploaderAzure","endpointType","hide","style","display","attach","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","getFirstByClass","children","child","firstChild","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","getAttribute","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","Uint8Array","character","charCodeAt","level","console","isObject","variable","Object","toString","isFunction","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","newStr","nextIdxToReplace","strBefore","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","override","target","sourceFn","super_","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","Storage","getItem","bind","oldFunc","context","newArgs","concat","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","disposeSupport","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","file","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","removeFileRef","record","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_FINALIZING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","normalizeData","fileContainer","_prepareItemsForUpload","cancel","uploadData","_uploadData","getName","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","enabled","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","uploadDataRecord","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","isResumable","hasResumeRecord","debug","pauseUpload","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","_onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","enableAuto","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","isDownloading","removeItem","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","warnBeforeUnload","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","resetOnStatus","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","normalizedResponse","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgressChunksArray","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","onFinalizing","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","_getLocalStorageId","isAttemptingResume","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","getChunkSize","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","chunkingState","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","azure","util","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","_getPrefixedParamName","getParamsAsHeaders","headerName","parseAzureError","domParser","DOMParser","responseDoc","parseFromString","errorTag","errorDetails","codeTag","messageTag","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","signature","blobProperties","minFileSize","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","pendingRequests","handleSuccessResponse","responseJson","successIndicator","failureIndicator","parsedResponse","codes","endpoints","promises","endpointHandler","Content-Type","createBlockId","partNum","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","doc","implementation","createDocument","latestEl","latestTextEl","createTextNode","XMLSerializer","serializeToString","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","qqPath","extractDirectoryPath","fileError","fullPath","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","indexOfNameInFullPath","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","includes","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","relatedTarget","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateDom","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListEl","defaultButton","dropTextEl","uploaderEl","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"azure.jquery.fine-uploader.js","sourcesContent":[null,"/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var $el,\n        pluginOptions = [\"uploaderType\", \"endpointType\"];\n\n    function init(options) {\n        var xformedOpts = transformVariables(options || {}),\n            newUploaderInstance = getNewUploaderInstance(xformedOpts);\n\n        uploader(newUploaderInstance);\n        addCallbacks(xformedOpts, newUploaderInstance);\n\n        return $el;\n    }\n\n    function getNewUploaderInstance(params) {\n        var uploaderType = pluginOption(\"uploaderType\"),\n            namespace = pluginOption(\"endpointType\");\n\n        // If the integrator has defined a specific type of uploader to load, use that, otherwise assume `qq.FineUploader`\n        if (uploaderType) {\n            // We can determine the correct constructor function to invoke by combining \"FineUploader\"\n            // with the upper camel cased `uploaderType` value.\n            uploaderType = uploaderType.charAt(0).toUpperCase() + uploaderType.slice(1).toLowerCase();\n\n            if (namespace) {\n                return new qq[namespace][\"FineUploader\" + uploaderType](params);\n            }\n\n            return new qq[\"FineUploader\" + uploaderType](params);\n        }\n        else {\n            if (namespace) {\n                return new qq[namespace].FineUploader(params);\n            }\n\n            return new qq.FineUploader(params);\n        }\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(\"fineuploader\");\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(\"fineuploader\", data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    //the underlying Fine Uploader instance is stored in jQuery's data stored, associated with the element\n    // tied to this instance of the plug-in\n    function uploader(instanceToStore) {\n        return dataStore(\"uploader\", instanceToStore);\n    }\n\n    function pluginOption(option, optionVal) {\n        return dataStore(option, optionVal);\n    }\n\n    // Implement all callbacks defined in Fine Uploader as functions that trigger appropriately names events and\n    // return the result of executing the bound handler back to Fine Uploader\n    function addCallbacks(transformedOpts, newUploaderInstance) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(newUploaderInstance._options.callbacks, function(prop, nonJqueryCallback) {\n            var name, callbackEventTarget;\n\n            name = /^on(\\w+)/.exec(prop)[1];\n            name = name.substring(0, 1).toLowerCase() + name.substring(1);\n            callbackEventTarget = $el;\n\n            callbacks[prop] = function() {\n                var originalArgs = Array.prototype.slice.call(arguments),\n                    transformedArgs = [],\n                    nonJqueryCallbackRetVal, jqueryEventCallbackRetVal;\n\n                $.each(originalArgs, function(idx, arg) {\n                    transformedArgs.push(maybeWrapInJquery(arg));\n                });\n\n                nonJqueryCallbackRetVal = nonJqueryCallback.apply(this, originalArgs);\n\n                try {\n                    jqueryEventCallbackRetVal = callbackEventTarget.triggerHandler(name, transformedArgs);\n                }\n                catch (error) {\n                    qq.log(\"Caught error in Fine Uploader jQuery event handler: \" + error.message, \"error\");\n                }\n\n                /*jshint -W116*/\n                if (nonJqueryCallbackRetVal != null) {\n                    return nonJqueryCallbackRetVal;\n                }\n                return jqueryEventCallbackRetVal;\n            };\n        });\n\n        newUploaderInstance._options.callbacks = callbacks;\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            if (source.uploaderType !== \"basic\") {\n                xformed = { element: $el[0] };\n            }\n            else {\n                xformed = {};\n            }\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if ($.inArray(prop, pluginOptions) >= 0) {\n                pluginOption(prop, val);\n            }\n            else if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    var arrayObjDest = {};\n\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else if ($.isPlainObject(arrayVal)) {\n                        transformVariables(arrayVal, arrayObjDest);\n                        arrayVals.push(arrayObjDest);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            !command.match(/^_/) && //enforce private methods convention\n            uploader()[command] !== undefined;\n    }\n\n    // Assuming we have already verified that this is a valid command, call the associated function in the underlying\n    // Fine Uploader instance (passing along the arguments from the caller) and return the result of the call back to the caller\n    function delegateCommand(command) {\n        var xformedArgs = [],\n            origArgs = Array.prototype.slice.call(arguments, 1),\n            retVal;\n\n        transformVariables(origArgs, xformedArgs);\n\n        retVal = uploader()[command].apply(uploader(), xformedArgs);\n\n        return maybeWrapInJquery(retVal);\n    }\n\n    // If the value is an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n    function maybeWrapInJquery(val) {\n        var transformedVal = val;\n\n        // If the command is returning an `HTMLElement` or `HTMLDocument`, wrap it in a `jQuery` object\n        /*jshint -W116*/\n        if (val != null && typeof val === \"object\" &&\n           (val.nodeType === 1 || val.nodeType === 9) && val.cloneNode) {\n\n            transformedVal = $(val);\n        }\n\n        return transformedVal;\n    }\n\n    $.fn.fineUploader = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (uploader() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist on jQuery.fineUploader\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery, qq*/\n(function($) {\n    \"use strict\";\n    var rootDataKey = \"fineUploaderDnd\",\n        $el;\n\n    function init(options) {\n        if (!options) {\n            options = {};\n        }\n\n        options.dropZoneElements = [$el];\n        var xformedOpts = transformVariables(options);\n        addCallbacks(xformedOpts);\n        dnd(new qq.DragAndDrop(xformedOpts));\n\n        return $el;\n    }\n\n    function dataStore(key, val) {\n        var data = $el.data(rootDataKey);\n\n        if (val) {\n            if (data === undefined) {\n                data = {};\n            }\n            data[key] = val;\n            $el.data(rootDataKey, data);\n        }\n        else {\n            if (data === undefined) {\n                return null;\n            }\n            return data[key];\n        }\n    }\n\n    function dnd(instanceToStore) {\n        return dataStore(\"dndInstance\", instanceToStore);\n    }\n\n    function addCallbacks(transformedOpts) {\n        var callbacks = transformedOpts.callbacks = {};\n\n        $.each(new qq.DragAndDrop.callbacks(), function(prop, func) {\n            var name = prop,\n                $callbackEl;\n\n            $callbackEl = $el;\n\n            callbacks[prop] = function() {\n                var args = Array.prototype.slice.call(arguments),\n                    jqueryHandlerResult = $callbackEl.triggerHandler(name, args);\n\n                return jqueryHandlerResult;\n            };\n        });\n    }\n\n    //transform jQuery objects into HTMLElements, and pass along all other option properties\n    function transformVariables(source, dest) {\n        var xformed, arrayVals;\n\n        if (dest === undefined) {\n            xformed = {};\n        }\n        else {\n            xformed = dest;\n        }\n\n        $.each(source, function(prop, val) {\n            if (val instanceof $) {\n                xformed[prop] = val[0];\n            }\n            else if ($.isPlainObject(val)) {\n                xformed[prop] = {};\n                transformVariables(val, xformed[prop]);\n            }\n            else if ($.isArray(val)) {\n                arrayVals = [];\n                $.each(val, function(idx, arrayVal) {\n                    if (arrayVal instanceof $) {\n                        $.merge(arrayVals, arrayVal);\n                    }\n                    else {\n                        arrayVals.push(arrayVal);\n                    }\n                });\n                xformed[prop] = arrayVals;\n            }\n            else {\n                xformed[prop] = val;\n            }\n        });\n\n        if (dest === undefined) {\n            return xformed;\n        }\n    }\n\n    function isValidCommand(command) {\n        return $.type(command) === \"string\" &&\n            command === \"dispose\" &&\n            dnd()[command] !== undefined;\n    }\n\n    function delegateCommand(command) {\n        var xformedArgs = [], origArgs = Array.prototype.slice.call(arguments, 1);\n        transformVariables(origArgs, xformedArgs);\n        return dnd()[command].apply(dnd(), xformedArgs);\n    }\n\n    $.fn.fineUploaderDnd = function(optionsOrCommand) {\n        var self = this, selfArgs = arguments, retVals = [];\n\n        this.each(function(index, el) {\n            $el = $(el);\n\n            if (dnd() && isValidCommand(optionsOrCommand)) {\n                retVals.push(delegateCommand.apply(self, selfArgs));\n\n                if (self.length === 1) {\n                    return false;\n                }\n            }\n            else if (typeof optionsOrCommand === \"object\" || !optionsOrCommand) {\n                init.apply(self, selfArgs);\n            }\n            else {\n                $.error(\"Method \" +  optionsOrCommand + \" does not exist in Fine Uploader's DnD module.\");\n            }\n        });\n\n        if (retVals.length === 1) {\n            return retVals[0];\n        }\n        else if (retVals.length > 1) {\n            return retVals;\n        }\n\n        return this;\n    };\n\n}(jQuery));\n","/*globals jQuery*/\n/**\n * Simply an alias for the `fineUploader` plug-in wrapper, but hides the required `endpointType` option from the\n * integrator.  I thought it may be confusing to convey to the integrator that, when using Fine Uploader in Azure mode,\n * you need to specify an `endpointType` with a value of \"azure\", and perhaps an `uploaderType` with a value of \"basic\" if\n * you want to use basic mode when uploading directly to Azure as well.  So, you can use this plug-in alias and not worry\n * about the `endpointType` option at all.\n */\n(function($) {\n    \"use strict\";\n\n    $.fn.fineUploaderAzure = function(optionsOrCommand) {\n        if (typeof optionsOrCommand === \"object\") {\n\n            // This option is used to tell the plug-in wrapper to instantiate the appropriate Azure-namespace modules.\n            optionsOrCommand.endpointType = \"azure\";\n        }\n\n        return $.fn.fineUploader.apply(this, arguments);\n    };\n\n}(jQuery));\n","/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.2\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    // adapted from https://stackoverflow.com/a/23278460/486979\n    supportsFolderDrop = supportsFileDrop && (function() {\n        var input = document.createElement(\"input\");\n\n        input.type = \"file\";\n        return !!(\"webkitdirectory\" in (input || document.querySelectorAll(\"input[type=file]\")[0]));\n    }());\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status,\n                    file: spec.file\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        removeFileRef: function(id) {\n            var record = getDataByIds(id);\n\n            if (record) {\n                delete record.file;\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_FINALIZING: \"upload finalizing\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (uploadData && uploadData.status === qq.status.UPLOAD_FINALIZING) {\n                this.log(qq.format(\"Ignoring cancel for file ID {} ({}).  Finalizing upload.\", id, this.getName(id)), \"error\");\n            }\n            else {\n                this._handler.cancel(id);\n            }\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            var file = this._handler.getFile(fileOrBlobId);\n            var uploadDataRecord;\n\n            if (!file) {\n                uploadDataRecord = this._uploadData.retrieve({id: fileOrBlobId});\n\n                if (uploadDataRecord) {\n                    file = uploadDataRecord.file;\n                }\n            }\n\n            return file || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        isResumable: function(id) {\n            return this._handler.hasResumeRecord(id);\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n            this._uploadData.removeFileRef(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._onUploadChunkSuccess(id, chunkData);\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self),\n                    setStatus: function(id, status) {\n                        self._uploadData.setStatus(id, status);\n                    }\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({\n                uuid: uuid,\n                name: name,\n                size: size,\n                batchId: batchId,\n                file: file\n            });\n\n            this._handler.add(id, file);\n\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadChunkSuccess: function(id, chunkData) {\n            if (!this._preventRetries[id] && this._options.retry.enableAuto) {\n                this._autoRetries[id] = 0;\n            }\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                var isDownloading = window.localStorage.getItem('isDownloading')\n                window.localStorage.removeItem('isDownloading')\n                if (self.getInProgress() && !isDownloading) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n            warnBeforeUnload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: function(id) {\n                    return 2000000;\n                },\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    },\n\n                    resetOnStatus: []\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._options.warnBeforeUnload && this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id] && requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normalizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normalizedResponse.error, \"error\");\n\n                    if (\n                        normalizedResponse.reset ||\n                        (xhr && options.chunking.success.resetOnStatus.indexOf(xhr.status) >= 0)\n                    ) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normalizedResponse, xhr)) {\n                        upload.cleanup(id, normalizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                var inProgressChunksArray = handler._getFileState(id).chunking.inProgress;\n\n                inProgressIdx = inProgressChunksArray ? qq.indexOf(inProgressChunksArray, chunkIdx) : -1;\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n            handler._getFileState(id).attemptingResume = false;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            var fileState = handler._getFileState(id);\n\n            if (!fileState) {\n                log(\"Ignoring send request as this upload may have been cancelled, File ID \" + id, \"warn\");\n                return;\n            }\n\n            fileState.loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged,\n                    onFinalizing: function(id) {\n                        options.setStatus(id, qq.status.UPLOAD_FINALIZING);\n                    }\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name).then(\n                function(response) {\n                    if (response && response.pause) {\n                        options.setStatus(id, qq.status.PAUSED);\n                        handler.pause(id);\n                        connectionManager.free(id);\n                    }\n                    else {\n                        if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            simple.send(id, name);\n                        }\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        hasResumeRecord: function(id) {\n            var key = handler.isValid(id) &&\n                handler._getLocalStorageId &&\n                handler._getLocalStorageId(id);\n\n            if (key) {\n                return !!localStorage.getItem(key);\n            }\n\n            return false;\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        getChunkSize = function(id) {\n            var fileState = handler._getFileState(id);\n\n            if (fileState.chunkSize) {\n                return fileState.chunkSize;\n            }\n\n            else {\n                var chunkSize = chunking.partSize;\n\n                if (qq.isFunction(chunkSize)) {\n                    chunkSize = chunkSize(id, getSize(id));\n                }\n\n                fileState.chunkSize = chunkSize;\n                return chunkSize;\n            }\n        },\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            var fileState = handler._getFileState(id);\n\n            if (fileState) {\n                delete fileState.temp.cachedChunks[chunkIdx];\n            }\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) &&\n                !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var fileState = handler._getFileState(id) || {},\n                chunkingState =  fileState.chunking || {},\n                inProgress = optInProgress || chunkingState.inProgress,\n                remaining = optRemaining || chunkingState.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = getChunkSize(id),\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/FineUploader/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = getChunkSize(id),\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = getChunkSize(id);\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            // file may no longer be available if it was recently cancelled\n            if (state) {\n                if (!state.chunking) {\n                    handler.reevaluateChunking(id);\n                }\n\n                return state.chunking.enabled;\n            }\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(params) {\n            var chunkIdx = params.chunkIdx;\n            var id = params.id;\n\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                file.qqPath = extractDirectoryPath(entry);\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    function extractDirectoryPath(entry) {\n        var name = entry.name,\n            fullPath = entry.fullPath,\n            indexOfNameInFullPath = fullPath.lastIndexOf(name);\n\n        // remove file name from full path string\n        fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n        // remove leading slash in full path string\n        if (fullPath.charAt(0) === \"/\") {\n            fullPath = fullPath.substr(1);\n        }\n\n        return fullPath;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            if (isFileDrag(e)) {\n                e.preventDefault();\n                maybeHideDropZones();\n            }\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n\n    this._testing = {};\n    this._testing.extractDirectoryPath = extractDirectoryPath;\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest &&\n                (\n                    (dt.files && dt.files.length) ||                                     // Valid for drop events with files\n                    (!isSafari && dt.types.contains && dt.types.contains(\"Files\")) ||  // Valid in Chrome/Firefox\n                    (dt.types.includes && dt.types.includes(\"Files\"))               // Valid in IE\n                );\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n\n    this._testing = {};\n    this._testing.isValidFileDrag = isValidFileDrag;\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateDom,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListEl,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListEl = fileListNode.children[0].cloneNode(true);\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: tempTemplateEl,\n                fileTemplate: fileListEl\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateDom = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.appendChild(templateDom.template.cloneNode(true));\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            container.innerHTML = \"\";\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = templateDom.fileTemplate.cloneNode(true),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}